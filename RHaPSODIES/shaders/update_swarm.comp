#version 430 core

layout (local_size_x = 64, local_size_y = 1) in;

struct HandModel {
	float modelstate[64];
};

layout(std430, binding = 0) buffer HandModelBuffer
{
	HandModel models[64];
} HandModels;

layout(std430, binding = 4) buffer HandModelIBestBuffer
{
	HandModel models[64];
} HandModelsIBest;

layout(std430, binding = 5) buffer HandModelGBestBuffer
{
	HandModel model;
} HandModelsGBest;

layout(std430, binding = 6) buffer HandModelVelocityBuffer
{
	HandModel models[64];
} HandModelsVelocity;

layout(std430, binding = 7) buffer RandomBuffer
{
	float numbers[64*64*8];
} Random;

uniform unsigned int iRandomOffset;

uniform float fPhiCognitive;
uniform float fPhiSocial;

const float w = 0.72984f;
const uint rbuffer_size = 64*64*8;

const bool bPartialRandomization = true;
const float fProbPR = 0.005;

const float fConstraintThumbFlexionBaseMin = -60;
const float fConstraintThumbFlexionBaseMax =  40;
const float fConstraintThumbAdductionMin = 10;
const float fConstraintThumbAdductionMax = 90;
const float fConstraintThumbFlexionTipMin = 0;
const float fConstraintThumbFlexionTipMax = 90;

const float fConstraintFingerAdductionMin = -30;
const float fConstraintFingerAdductionMax =  30;
const float fConstraintFingerFlexionMin = 0;
const float fConstraintFingerFlexionMax = 90;

void Imitate(float phi_cognitive, float phi_social);
void GetBoundsByJointIndex(int index,
						   out float fMin,
						   out float fMax);

void main() {
	Imitate(fPhiCognitive, fPhiSocial);
}

void Imitate(float phi_cognitive, float phi_social) {
	uint idx = gl_LocalInvocationID.x;
	
	for(int dim = 0; dim < 64; ++dim) {
		if(dim%32 >= 28)
			continue;

		uint r1_idx = (iRandomOffset +
					   gl_LocalInvocationID.x*64*2 +
					   2*dim + 0) % rbuffer_size;
		uint r2_idx = (iRandomOffset +
					   gl_LocalInvocationID.x*64*2 +
					   2*dim + 1) % rbuffer_size;
		
		float r1 = Random.numbers[r1_idx];
		float r2 = Random.numbers[r2_idx];
		
		HandModelsVelocity.models[idx].modelstate[dim] =
			w*(HandModelsVelocity.models[idx].modelstate[dim] +
			   phi_cognitive*r1*(HandModelsIBest.models[idx].modelstate[dim] -
								 HandModels.models[idx].modelstate[dim]) +
			   phi_social*r2*(HandModelsGBest.model.modelstate[dim] -
							  HandModels.models[idx].modelstate[dim]));

		float fMinAngle = 0;
		float fMaxAngle = 0;
		if(dim%32 >= 0  && dim%32 < 20) {
			GetBoundsByJointIndex(dim, fMinAngle, fMaxAngle);
				
			if(HandModels.models[idx].modelstate[dim] +
			   HandModelsVelocity.models[idx].modelstate[dim] < fMinAngle ||
			   HandModels.models[idx].modelstate[dim] +
			   HandModelsVelocity.models[idx].modelstate[dim] > fMaxAngle ||
				idx == 63 || idx == 62) {
				HandModelsVelocity.models[idx].modelstate[dim] = 0;
			}
		}

		HandModels.models[idx].modelstate[dim] +=
			HandModelsVelocity.models[idx].modelstate[dim];

		if(bPartialRandomization) {
			uint r3_idx =
				(iRandomOffset +
				 gl_LocalInvocationID.x*64 +
				 rbuffer_size/4 + dim) % rbuffer_size;
			float r3 = Random.numbers[r3_idx];

			if(idx != 63 && idx != 62) {
				if(dim%32 >= 0  && dim%32 < 20 && r3 < fProbPR) {
					uint r4_idx =
						(iRandomOffset +
						 gl_LocalInvocationID.x*64 +
						 rbuffer_size/2 + dim) % rbuffer_size;
					float r4 = Random.numbers[r4_idx];
			
					HandModels.models[idx].modelstate[dim] =
						fMinAngle + r4*(fMaxAngle - fMinAngle);

					// also reset velocity here?
					HandModelsVelocity.models[idx].modelstate[dim] = 0;
				}
			}
		}
	}

	vec4 qOri = normalize(vec4(HandModels.models[idx].modelstate[24],
							   HandModels.models[idx].modelstate[25],
							   HandModels.models[idx].modelstate[26],
							   HandModels.models[idx].modelstate[27]));
	HandModels.models[idx].modelstate[24] = qOri[0];
	HandModels.models[idx].modelstate[25] = qOri[1];
	HandModels.models[idx].modelstate[26] = qOri[2];
	HandModels.models[idx].modelstate[27] = qOri[3];

	qOri = normalize(vec4(HandModels.models[idx].modelstate[32+24],
						  HandModels.models[idx].modelstate[32+25],
						  HandModels.models[idx].modelstate[32+26],
						  HandModels.models[idx].modelstate[32+27]));
	HandModels.models[idx].modelstate[32+24] = qOri[0];
	HandModels.models[idx].modelstate[32+25] = qOri[1];
	HandModels.models[idx].modelstate[32+26] = qOri[2];
	HandModels.models[idx].modelstate[32+27] = qOri[3];
}

void GetBoundsByJointIndex(int index,
						   out float fMin,
						   out float fMax) {
		
	index %= 32;

	bool bThumb = (index / 4 == 0);
	index %= 4;

	if(bThumb) {
		if(index == 0) {
			fMin = fConstraintThumbFlexionBaseMin;
			fMax = fConstraintThumbFlexionBaseMax;
		}
		else if(index == 1) {
			fMin = fConstraintThumbAdductionMin;
			fMax = fConstraintThumbAdductionMax;
		}
		else {
			fMin = fConstraintThumbFlexionTipMin;
			fMax = fConstraintThumbFlexionTipMax;
		}
	}
	else {
		if(index == 1) {
			fMin = fConstraintFingerAdductionMin;
			fMax = fConstraintFingerAdductionMax;
		}
		else {
			fMin = fConstraintFingerFlexionMin;
			fMax = fConstraintFingerFlexionMax;
		}
	}
}
