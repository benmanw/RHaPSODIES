#version 430 core

layout (local_size_x = 64, local_size_y = 1) in;

struct HandModel {
	float modelstate[64];
};

layout(std430, binding = 0) buffer HandModelBuffer
{
	HandModel models[64];
} HandModels;

layout(std430, binding = 4) buffer HandModelIBestBuffer
{
	HandModel models[64];
} HandModelsIBest;

layout(std430, binding = 5) buffer HandModelGBestBuffer
{
	HandModel model;
} HandModelsGBest;

layout(std430, binding = 7) buffer HandModelVelocityBuffer
{
	HandModel models[64];
} HandModelsVelocity;

layout(std430, binding = 8) buffer RandomBuffer
{
	float numbers[64*64*2];
} Random;


const float w = 0.72984f;

void Imitate(float phi_cognitive, float phi_social);
void GetBoundsByJointIndex(int index,
						   out float fMin,
						   out float fMax);

void main() {
	Imitate(2.8f, 1.3f);
}

void Imitate(float phi_cognitive, float phi_social) {
	uint idx = gl_LocalInvocationID.x;
	
	for(int dim = 0; dim < 64; ++dim) {
		if(dim%32 >= 28)
			continue;
			
		float r1 = Random.numbers[gl_LocalInvocationID.x*64*2 + dim*2 + 0];
		float r2 = Random.numbers[gl_LocalInvocationID.x*64*2 + dim*2 + 1];

		HandModelsVelocity.models[idx].modelstate[dim] =
			w*(HandModelsVelocity.models[idx].modelstate[dim] +
			   phi_cognitive*r1*(HandModelsIBest.models[idx].modelstate[dim] -
								 HandModels.models[idx].modelstate[dim]) +
			   phi_social*r2*(HandModelsGBest.model.modelstate[dim] -
							  HandModels.models[idx].modelstate[dim]));

		if((dim%32 >= 0  && dim%32 < 20)) {
			float fMinAngle = 0;
			float fMaxAngle = 0;

			GetBoundsByJointIndex(dim, fMinAngle, fMaxAngle);
				
			if(HandModels.models[idx].modelstate[dim] < fMinAngle &&
			   HandModelsVelocity.models[idx].modelstate[dim] < 0) {
				HandModelsVelocity.models[idx].modelstate[dim] = 0;
			}
			if(HandModels.models[idx].modelstate[dim] > fMaxAngle &&
			   HandModelsVelocity.models[idx].modelstate[dim] > 0) {
				HandModelsVelocity.models[idx].modelstate[dim] = 0;
			}
		}

		HandModels.models[idx].modelstate[dim] +=
			HandModelsVelocity.models[idx].modelstate[dim];				
	}

	// normalize quaternions
	vec4 qOri = normalize(vec4(HandModels.models[idx].modelstate[24],
							   HandModels.models[idx].modelstate[25],
							   HandModels.models[idx].modelstate[26],
							   HandModels.models[idx].modelstate[27]));
	HandModels.models[idx].modelstate[24] = qOri[0];
	HandModels.models[idx].modelstate[25] = qOri[1];
	HandModels.models[idx].modelstate[26] = qOri[2];
	HandModels.models[idx].modelstate[27] = qOri[3];

	qOri = normalize(vec4(HandModels.models[idx].modelstate[32+24],
						  HandModels.models[idx].modelstate[32+25],
						  HandModels.models[idx].modelstate[32+26],
						  HandModels.models[idx].modelstate[32+27]));
	HandModels.models[idx].modelstate[32+24] = qOri[0];
	HandModels.models[idx].modelstate[32+25] = qOri[1];
	HandModels.models[idx].modelstate[32+26] = qOri[2];
	HandModels.models[idx].modelstate[32+27] = qOri[3];
}

void GetBoundsByJointIndex(int index,
						   out float fMin,
						   out float fMax) {
		
	index %= 32;

	bool bThumb = (index / 4 == 0);
	index %= 4;

	if(bThumb) {
		if(index == 1) {
			// adduction abduction dof
			fMin =  0;
			fMax = 70;
		}
		else {
			// flexion dof
			fMin =  0;
			fMax = 90;
		}
	}
	else {
		if(index == 1) {
			// adduction abduction dof
			fMin = -30;
			fMax =  30;
		}
		else {
			// flexion dof
			fMin = 0;
			fMax = 60;
		}
	}
}
