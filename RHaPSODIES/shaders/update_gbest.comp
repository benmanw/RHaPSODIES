#version 430 core

layout (local_size_x = 1, local_size_y = 1) in;

struct HandModel {
	float modelstate[64];
};

layout(std430, binding = 0) buffer HandModelBuffer
{
	HandModel models[64];
} HandModels;

layout(std430, binding = 4) buffer HandModelIBestBuffer
{
	HandModel models[64];
} HandModelsIBest;

layout(std430, binding = 5) buffer HandModelGBestBuffer
{
	HandModel models[2];
} HandModelsGBest;

// layout(std430, binding = 6) buffer HandModelFBestBuffer
// {
// 	HandModel model;
// } HandModelsFBest;

//const float infinity = 1.0 / 0.0;

void main() {
	float fPenaltyMin = 1e20;
	int iMinIndex = 0;

	// find min ibest (gbest) penalty
	for(int i = 0; i < 64; i++) {
		if(HandModelsIBest.models[i].modelstate[31] < fPenaltyMin) {
			fPenaltyMin = HandModelsIBest.models[i].modelstate[31];
			iMinIndex = i;
		}
	}

	bool bUpdateFBest =
		fPenaltyMin < HandModelsGBest.models[1].modelstate[31];
	
	// update gbest and framebest models
	for(int i = 0; i < 64; ++i) {
		if(bUpdateFBest) {
			HandModelsGBest.models[1].modelstate[i] =
				HandModelsIBest.models[iMinIndex].modelstate[i];
		}
		
		HandModelsGBest.models[0].modelstate[i] =
			HandModelsIBest.models[iMinIndex].modelstate[i];
	}
}
