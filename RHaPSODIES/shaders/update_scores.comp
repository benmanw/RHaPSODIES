#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 4, r32ui) uniform restrict uimage2D imgFinalResult;

struct HandModel {
	float modelstate[64];
};

layout(std430, binding = 0) buffer HandModelBuffer
{
	HandModel models[64];
} HandModels;

layout(std430, binding = 4) buffer HandModelIBestBuffer
{
	HandModel models[64];
} HandModelsIBest;

const float Pi = 3.14159265358979323846f;

float Penalty(float fDiff, float fUnion, float fIntersection);
float PenaltyFromReduction(float fDiff, float fUnion, float fIntersection);
float PenaltyPrior(unsigned int model_index);

void UpdateIBest(float fPenalty);

void main() {
	ivec2 texlookup_base = ivec2(
		gl_LocalInvocationID.x * 3,
		gl_LocalInvocationID.y
		);

	float difference_result   = imageLoad(imgFinalResult,
										  texlookup_base + ivec2(0,0))[0] / float(0x7fff);
	float union_result        = imageLoad(imgFinalResult,
										  texlookup_base + ivec2(1,0))[0];
	float intersection_result = imageLoad(imgFinalResult,
										  texlookup_base + ivec2(2,0))[0];

	float fPenalty = Penalty(difference_result,
							 union_result,
							 intersection_result);

	UpdateIBest(fPenalty);
}

float DegToRad(float fDegrees)
{
	return fDegrees / 180.0f * Pi;
}

float Penalty(float fDiff,
			  float fUnion,
			  float fIntersection) {
	float fLambdaK = 2.0;
	float fPenalty =
		PenaltyFromReduction(fDiff, fUnion, fIntersection);// +
		// fLambdaK * (PenaltyPrior(0) +
		// 			PenaltyPrior(32));
		
	return fPenalty;
}

float PenaltyFromReduction(float fDiff,
						   float fUnion,
						   float fIntersection) {
	float fLambda = 25;
	float fDepthTerm = fDiff / (fUnion + 1e-6);
	float fSkinTerm = (1 - 2*fIntersection / (fIntersection + fUnion + 1e-6));
	float fPenalty = fLambda * fDepthTerm + fSkinTerm;

	return fPenalty;
}

float PenaltyPrior(unsigned int offset) {
	float fPenaltySum = 0;
	
	unsigned int idx =
		(gl_LocalInvocationID.y*8 +
		 gl_LocalInvocationID.x);
		
	for(int dof = 5; dof < 17; dof += 4) {
		fPenaltySum +=
			-min(HandModels.models[idx].modelstate[offset + dof] -
				 HandModels.models[idx].modelstate[offset + dof+4],
				 0.0f);
	}

	return DegToRad(fPenaltySum);
}

void UpdateIBest(float fPenalty) {
	unsigned int idx =
		(gl_LocalInvocationID.y*8 +
		 gl_LocalInvocationID.x);

	float fIBestPenalty =
		HandModelsIBest.models[idx].modelstate[31];
	
	if(fPenalty <= fIBestPenalty) {
		for(int i = 0; i < 28; ++i) {
			HandModelsIBest.models[idx].modelstate[i] =
				HandModels.models[idx].modelstate[i];
			HandModelsIBest.models[idx].modelstate[32+i] =
				HandModels.models[idx].modelstate[32+i];
		}
		HandModelsIBest.models[idx].modelstate[31] = fPenalty;
	}
}
